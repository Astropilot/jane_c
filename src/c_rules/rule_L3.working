# -*- coding: utf-8 -*-

"""
Jane for C Projects
Author: Yohann MARTIN (https://github.com/Astropilot/jane_c)

L3 Rule: Always place a space after a comma or a keyword.
         No space between name function and opening parenthesis
         or after unary operator.
         All binary and ternary operators should be separated from
         the arguments by a space on both sides.
"""

from etna_style_utils import *
from srcml import *

class RuleChecker:

    C_KEYWORDS = ["auto", "break", "case", "char", "const",
                  "continue", "default", "do", "double", "else",
                  "enum", "extern", "float", "for", "goto", "if",
                  "int", "inline", "long", "register", "restrict", "return", "short", "signed",
                  "static", "struct", "switch", "typedef",
                  "union", "unsigned", "void", "volatile", "while", ","]

    UNARY_OPERATORS = ["!", "~"]

    SPECIAL_UNARY_OPERATORS = ["--", "++"]

    BINARY_OPERATORS = ["/", "%", "<<", ">>", "^", "|", "&&", "||",
                        "=", "<", ">", "<=", ">=", "==", "!="]

    UNARY_AND_BINARY_OPERATORS = ["+", "-", "&", "*"]

    def __init__(self, project):
        self.project = project

    def check_rule(self):
        pass
        project = self.project
        print "Checking L3 Rule..."
        print "Rule reminder: Always place a space after a comma or a keyword."
        print "               No space between name function and opening parenthesis or after unary operator."
        print "               All binary and ternary operators should be separated from the arguments by a space on both sides."
        is_rule_ok = True

        source_files = project.get_files_from_project(project.FILE_TYPES["C_FILES"])

        re_newline = re.compile(r'\n')
        for file in source_files:
            with open(file, 'U') as content_file:
                content = content_file.read()

            for keyword in self.C_KEYWORDS:
                keyword_found = re.finditer("(" + keyword + ".)", content)
                for keyfound in keyword_found:
                    if (keyfound.group(1)[-1] != ' '):
                        start_line = len(re_newline.findall(content, 0, keyfound.start(1)))+1
                        is_rule_ok = False
                        print "L3 Violation at line " + str(start_line) + ", '" + keyfound.group(1)[:-1] + "' keyword need to be followed by a space! File: " + file

            for unary in self.UNARY_OPERATORS:
                unary_found = re.finditer("(" + unary + ".?)", content)
                for unafound in unary_found:
                    if (unafound.group(1)[-1] == ' '):
                        start_line = len(re_newline.findall(content, 0, unafound.start(1)))+1
                        is_rule_ok = False
                        print "L3 Violation at line " + str(start_line) + ", '" + unafound.group(1)[:-1] + "' operator should not be followed by a space! File: " + file
        if is_rule_ok:
            print "Good job buddy, no violation!"
